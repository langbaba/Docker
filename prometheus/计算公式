常用计算函数
increase()
increase函数在promethes中，是⽤来针对Counter这种持续增长的数值，截取其中⼀段时间的增量
increase(node_cpu[1m])   这样就获取了CPU总使⽤时间在1分钟内的增量

sum()
sum()函数就是起到函数中的值加合的作⽤
sum(increase(node_cpu[1m]))
sum() 把所有数值加起来所以要在后⾯加上 by (instance) 进行分组显示

by ()
把sum加合到⼀起的数值，按照指定的⼀个⽅式进⾏⼀层或多层的拆分
sum(increase(node_cpu{mode="idle"}[1m])) by (instance)

指定标签
key{value,value}
把显示结果缩小的指定标签
count_netstat_wait_connections{exported_instance="log"}

模糊匹配
=~
将标签内的数值以正则表达式的方式显示出来
count_netstat_wait_connections{exported_instance=~"web.*"}
.* 属于正则表达式
模糊匹配  =~
模糊不匹配  !~

数值过滤
>,<,==,!=,>=,<=
对数值进行比较过滤
count_netstat_wait_connections{exported_instance=~"web.*"} > 400

rate()
rate() 函数是专门搭配counter类型数据使⽤的函数它的功能，是按照设置⼀个时间段，取counter在这个时间段中的平均每秒的增量
rate(node_network_receive_bytes[1m])
使⽤任何counter数据类型的时候，先给它加上⼀个rate()或者increase()两个函数

increase 函数 其实和rate() 的概念及使⽤⽅法 ⾮常相似
rate(1m) 是取⼀段时间增量的平均每秒数量
increase(1m) 则是取⼀段时间增量的总量
incraese() rate() 相差60倍 incraese() 没有除以了60秒，rate()除以了60秒
increase(5m)           对于5分钟采集适合
rate() -> CPU 内存 硬盘 IO ⽹络流量        对于1分钟采集适合

topk()函数
取前⼏位的最⾼值
Gauge类型的使⽤
  topk(3,count_netstat_wait_connections)
Counter类型的使⽤
  topk(3,rate(node_network_receive_bytes[20m]))
只适合于 在console查看 graph的意义不⼤

count()函数
把数值符合条件的输出数⽬进⾏加合
count(count_netstat_wait_connections > 200)
⼀般⽤它count进⾏⼀些模糊的监控判断
⽐如说 企业中有100台服务器，那么当只有10台服务器CPU⾼，于80%的时候 这个时候不需要报警，但是当符合80%CPU的服务器数量，超过30台的时候那么就会触发报警

irate()函数
用于计算距离向量中时间序列的每秒瞬时增长率
irate(node_cpu_seconds_total{job="node"}[5m])

avg()函数
将irate函数封装在avg聚合中，并添加了一个by子句该子句通过实例标签聚合。
这将产生三个新的指标，使用来自所有CPU和所有模式的值来平均主机的CPU使用情况。
avg(irate(node_cpu_seconds_total{job="node"}[5m])) by (instance)

Vector matches （向量匹配）
https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching
node_systemd_unit_state{name="docker.service"} == 1 and on (instance, job)metadata{datacenter=“BJ"}



官方提供所有函数介绍
https://prometheus.io/docs/prometheus/latest/querying/functions/





CPU Saturation(饱和度)
node_load1 > on (instance)count by (instance)(node_cpu_seconds_total{mode="idle"})

CPU使用率：
100 - (avg(irate(node_cpu_seconds_total{mode="idle"}[5m])) by (instance) * 100)

内存使用率：
100 - (node_memory_MemFree_bytes+node_memory_Cached_bytes+node_memory_Buffers_bytes) / node_memory_MemTotal_bytes * 100
(node_memory_MemTotal_bytes - (node_memory_MemFree_bytes + node_memory_Cached_bytes + node_memory_Buffers_bytes)) / node_memory_MemTotal_bytes * 100

• node_memory_MemTotal_bytes - 主机上的总内存
• node_memory_MemFree_bytes - 主机上的空闲内存
• node_memory_Buffers_bytes_bytes - 缓冲区缓存中的内存
• node_memory_Cached_bytes_bytes - 页面缓存中的内存

磁盘使用率：
跟：
100 - (node_filesystem_free_bytes{mountpoint="/",fstype=~"ext4|xfs"} / node_filesystem_size_bytes{mountpoint="/",fstype=~"ext4|xfs"} * 100)
数据：
(node_filesystem_size_bytes{mountpoint="/data"} - node_filesystem_free_bytes{mountpoint="/data"}) / node_filesystem_size_bytes{mountpoint="/data"} * 100

正则匹配/或者/run挂载点
可以使用正则表达式来匹配多个挂载点。
(node_filesystem_size_bytes{mountpoint=~"/|/run"} - node_filesystem_free_bytes{mountpoint=~"/|/run"}) / node_filesystem_size_bytes{mountpoint=~"/|/run"} * 100
注意：
（1）不能使用匹配空字符串的正则表达式。
（2）对于不匹配的正则表达式，还有一个!~运算符。

预计多长时间磁盘爆满
predict_linear(node_filesystem_free_bytes{mountpoint="/"}[1h], 4*3600) < 0
predict_linear(node_filesystem_free_bytes{job="node"}[1h], 4*3600) < 0
获取空间使用空间一个小时的平均值，查看4个小时后是否爆满

监控服务状态
node_systemd_unit_state{name="docker.service"}                    # 只查询 docker服务
node_systemd_unit_state{name="docker.service",state="active"}     # 返回活动状态
node_systemd_unit_state{name="docker.service"} == 1               # 返回当前服务的状态
注：比较二进制运算符:==。这将检索所有值为1、名称标签为docker.service的指标。


